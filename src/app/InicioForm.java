package app;


import app.Conexion;
import app.Util;
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import static formularios.Applet.TEMPLATE_PROPERTY;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author pedro.ardila
 */
public class InicioForm extends javax.swing.JFrame {

    /**
     * Creates new form InicioForm
     */
    public InicioForm() {
        
        this.util=new Util();
        System.out.println("Utilitarios inicializados"); 
      /*  Conexion conexion=new Conexion();
        boolean respuesta=conexion.ConectarOracle();
                    
       if(respuesta==true)
           System.out.println("Conexión establecida"); 
       else
           System.out.println("Conexión a fallado"); 
            
        conexion.cargarHuellas(util);
        
        System.out.println("Cargadas huellas: "+util.cantidadHuellas()); */
       
        //iniciarVariables();       
        Iniciar();
        initComponents();
        start();
        
      //  conectarSocketEspera();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        informacion = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Manejador Dispositivo Huellero Digital Persona");

        informacion.setColumns(20);
        informacion.setRows(5);
        jScrollPane1.setViewportView(informacion);

        jMenu1.setText("Opciones");

        jMenuItem1.setText("Reiniciar Captura");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setText("Limipar Texto");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem2.setText("Salir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1)
                .addContainerGap(64, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        try{
            stop();
        }
        catch(Exception e){}
        
        start();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        informacion.setText(null);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InicioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InicioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InicioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InicioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InicioForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea informacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
    private DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();
    private DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
    private DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();
    
    
   /* private DPFPCapture Lector; 
    private DPFPEnrollment Reclutador;
    private DPFPVerification Verificador; */
    
    private DPFPTemplate template;
    public static String TEMPLATE_PROPERTY = "template";
    public DPFPFeatureSet featureinscripcion;
    public DPFPFeatureSet featureverificacion;
    private Util util;
    
    

    
    
    DPFPSample sampleGlobal;
    
    private ServerSocket ss = null;
    private Socket clientSocket = null;
    private Socket sock=null;
     
    boolean estadoHuellero=false;
    
    private int funcion=0;

    protected void Iniciar(){
            
            Lector.addDataListener(new DPFPDataAdapter(){
                public void dataAcquired(final DPFPDataEvent e){
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            EnviarTexto("Huella Capturada");
                            
                           // if(funcion==0)
                                procesarCaptura(e.getSample());
                            //else
                              //  procesarVerificar(e.getSample());
                            
                            //procesarCaptura(e.getSample());
                        }
                    });
                    
                   
                }
            });

            Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
                @Override
                public void readerConnected(DPFPReaderStatusEvent dpfprs) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            EnviarTexto("Sensor de Huella Activado o conectado");
                        }
                    });
                    
                }

                @Override
                public void readerDisconnected(DPFPReaderStatusEvent dpfprs) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            EnviarTexto("Sensor de Huella esta desactivado o no conectado");
                        }
                    });
                    
                }
            });

            Lector.addSensorListener(new DPFPSensorAdapter(){
                public void fingerTouched(final DPFPSensorEvent e){
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                           // EnviarTexto("El dedo ha sido colocado sobre el lector de huella");
                        }
                    });
                    //System.out.println("Dedo colocado");
                }

                public void fingerGone(final DPFPSensorAdapter e){
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                           // EnviarTexto("El dedo ha sido quitado del lector de huella");
                        }
                    });
                    //System.out.println("Dedo quitado");
                }
            });

            Lector.addErrorListener(new DPFPErrorAdapter(){
                public void errorReader(final DPFPErrorEvent e){
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            EnviarTexto("Error: "+e.getError());
                        }
                    });
                    System.out.println("Datos Error");
                }
            });
    }
    
   
    
   
     public DPFPFeatureSet extraerCaracteristicas(DPFPSample sample,DPFPDataPurpose purpose){
        DPFPFeatureExtraction extractor=DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, purpose);
        } catch (DPFPImageQualityException e) {
            return null;
        }
    }
    
    public void procesarCaptura(DPFPSample sample){
        featureinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);
        //featureverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
        
         
        if(featureinscripcion!=null){
            try{
                
                Reclutador.addFeatures(featureinscripcion);
                
                //DPFPTemplate tempMuestra=Reclutador.getTemplate();

                //util.buscarHuella(featureverificacion,Verificador);
                //util.buscarHuellaInd(tempMuestra,featureverificacion,Verificador);
            }
            catch(DPFPImageQualityException ex){
                System.out.println("Problema "+ex);
            }
            finally{
        
                 EnviarTexto("Las caracteristicas de la huella han sido creadas");
                 EstadoHuellas();
                //Reclutador.addFeatures(featureinscripcion);
                this.sampleGlobal=sample;
               //Image image = CrearImagenHuella(sample);
                   
                
                switch(Reclutador.getTemplateStatus()){
                    case TEMPLATE_STATUS_READY:
                        stop();
                        setTemplate(Reclutador.getTemplate());
                        
                        // util.setTemplate(Reclutador.getTemplate());
                         
                         EnviarTexto("La plantilla de la huella ha sido creada, ya puede verificarla o identificarla");
                        //System.out.println("La plantilla de la huella ha sido creada, ya puede verificarla o identificarla");
                          //funcion=1;
                        
                        byte[] huella=Reclutador.getTemplate().serialize();
                        
                        Image imagenHuella = CrearImagenHuella(this.sampleGlobal);
                        
                        responderDatos(huella,imagenHuella);
                        
                        this.Lector = null;
                        this.Reclutador = null;
                        this.Verificador = null;
                        
                        this.Lector = DPFPGlobal.getCaptureFactory().createCapture();
                        this.Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
                        this.Verificador = DPFPGlobal.getVerificationFactory().createVerification();
                   
                        Iniciar(); 
                        start();
                        
                        break;
                    case TEMPLATE_STATUS_FAILED:
                        Reclutador.clear();
                        stop();
                        EstadoHuellas();
                        setTemplate(null);
                         EnviarTexto("Lectura de huella a fallado.. Inicializando...");
                        start();
                        break;
                }
            }
        }
    }   
    public Image CrearImagenHuella(DPFPSample sample){
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }
    
    
    
    public void EstadoHuellas(){
        //System.out.println("Muestra de Huellas necesarias para Guardar Template: " + Reclutador.getFeaturesNeeded());
        EnviarTexto("Muestra de Huellas necesarias para Guardar Template: " + Reclutador.getFeaturesNeeded());
    }
    
  
    
    public void start(){
        
      /*  if(this.Lector==null || this.Reclutador==null || this.Verificador==null){
        
            this.Lector = DPFPGlobal.getCaptureFactory().createCapture();
            this.Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
            this.Verificador = DPFPGlobal.getVerificationFactory().createVerification();
        
        }*/
        
        
        Lector.startCapture();
        EnviarTexto("Utilizando lector de huella");
        //System.out.println("Utilizando lector de huella");
    }
    
    public void iniciarVariables(){
        this.Lector = DPFPGlobal.getCaptureFactory().createCapture();
        this.Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
        this.Verificador = DPFPGlobal.getVerificationFactory().createVerification();
    }
    
    public void stop(){
        
        Lector.stopCapture();
       
        
    }
    
    public DPFPTemplate getTemplate(){
        return template;
    }
    
    public void setTemplate(DPFPTemplate template){
        DPFPTemplate old = this.template;
        this.template = template;
        firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }
    
     public void EnviarTexto(String string){
        informacion.append(string + "\n");
    }
     
     public void  responderDatos(byte[] huella,Image imagenHuella){
        
         System.out.println("Voy a procesar datos "+huella.length);
         
        ByteArrayInputStream streamHuella=new ByteArrayInputStream(huella); 
        Integer tamHuella=huella.length;
        
        
        
        byte[] imageString = imageToString(imagenHuella);
        
        System.out.println("Imagen huella "+imageString.length);
        
        Object[] objetos=new Object[3];
        objetos[0]=huella;
        objetos[1]=tamHuella;
        objetos[2]=imageString;
        
        try{
          this.sock = new Socket("apps.akc.co",2100);
          ObjectOutputStream outputStream = new ObjectOutputStream(this.sock.getOutputStream());
          outputStream.writeObject(objetos); 
          sock.close();
        }
        catch(Exception e){
            System.out.println("Errp "+e);
        }
         
     }
     
     public byte[] imageToString(Image image)   {
       
      MediaTracker tracker = new MediaTracker(new Container());
      tracker.addImage(image, 0);
      try {
          tracker.waitForAll();
      }
      catch(InterruptedException e) { }
      BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), 1);
      Graphics gc = bufferedImage.createGraphics();
      gc.drawImage(image, 0, 0, null);
      
      ByteArrayOutputStream bos = new ByteArrayOutputStream();
      
      
        try {
            ImageIO.write(bufferedImage, "jpeg", bos);
        } catch (IOException ex) {
            Logger.getLogger(InicioForm.class.getName()).log(Level.SEVERE, null, ex);
        }

      return bos.toByteArray();
    }
     
     
   /*  public void conectarSocketEspera(){
         
        try{ 
            ServerSocket ss = new ServerSocket(2000);
            Socket clientSocket = new Socket();
            clientSocket=ss.accept();
            
            clientSocket.close();
            ss.close();
            
            start();
            
           
        }
        catch(Exception e){
            System.out.println(e);
        }
         
     }*/
     
     
     public void procesarVerificar(DPFPSample sample){
        
        featureverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
        
        System.out.println("Proceso de busqueda");
        
        if(featureverificacion!=null){
            //Long cedula=this.util.buscarHuellaInd(featureverificacion, Verificador);
            Long cedula=this.util.buscarHuellaInd(featureverificacion, Verificador);
            
            
            
            
         }
        
       
    
    }   
    
    public void setUtil(Util util){
            this.util=util;
     } 




}
